# Ruby CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-ruby/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/ruby:2.5.1-node-browsers
        environment:
          RAILS_ENV: test
          RACK_ENV: test
          PGHOST: localhost

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.4
      - image: redis
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "Gemfile.lock" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            bundle install --jobs=4 --retry=3 --path vendor/bundle

      - save_cache:
          paths:
            - ./vendor/bundle
          key: v1-dependencies-{{ checksum "Gemfile.lock" }}

      # Database setup
      - run: bundle exec rake db:create
      - run: bundle exec rake db:schema:load
      # run tests!
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format RspecJunitFormatter \
                            --out test_results/rspec.xml \
                            --format progress \
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)

      # collect reports
      - store_test_results:
          path: /tmp/test-results
      - store_artifacts:
          path: /tmp/test-results
          destination: test-results
  build_image:
    docker:
      - image: docker:18.09.0
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: install aws cli
          command: |
            apk add --no-cache --update py-pip
            pip install awscli
      - run:
          name: login ecr
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
      - run:
          name: unicorn image
          command: |
            UNICORN_TAG=$(echo ${CIRCLE_SHA1} | cut -c 1-6)
            docker build -t ${ECR_DOMAIN}:${UNICORN_TAG} -t ${ECR_DOMAIN}:unicorn-latest --build-arg RAILS_MASTER_KEY=${RAILS_MASTER_KEY} --build-arg RAILS_ENV=production .
            docker push ${ECR_DOMAIN}:${UNICORN_TAG}
            docker push ${ECR_DOMAIN}:unicorn-latest
      - run:
          name: nginx image
          command: |
            NGINX_TAG=$(echo ${CIRCLE_SHA1} | cut -c 7-12)
            docker build -t ${ECR_DOMAIN}:${NGINX_TAG} -t ${ECR_DOMAIN}:nginx-latest nginx/
            docker push ${ECR_DOMAIN}:${NGINX_TAG}
            docker push ${ECR_DOMAIN}:nginx-latest
      - run:
          name: redis image
          command: |
            REDIS_TAG=$(echo ${CIRCLE_SHA1} | cut -c 13-18)
            docker build -t ${ECR_DOMAIN}:${REDIS_TAG} -t ${ECR_DOMAIN}:redis-latest redis/
            docker push ${ECR_DOMAIN}:${REDIS_TAG}
            docker push ${ECR_DOMAIN}:redis-latest
  deploy:
    docker:
      - image: circleci/python:3.7
    steps:
      - run:
          name: install aws cli
          command: |
            sudo pip install awscli
      - run:
          name: download jq
          command: |
            wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            mv jq-linux64 jq
      - run:
          name: login
          command: |
            $(aws ecr get-login --no-include-email --region ap-northeast-1)
      - run:
          name: deploy
          command: |
            aws ecs describe-task-definition --task-definition rails-service | jq '.taskDefinition | {containerDefinitions: .containerDefinitions, volumes: .volumes}' > definition.json
            aws ecs register-task-definition --execution-role-arn arn:aws:iam::486463126616:role/ecs_task_role --family rails-service --cli-input-json file://definition.json
            aws ecs update-service --cluster sample-ecs-cluster --service rails-service --task-definition rails-service
      - run:
          name: migration
          command: |
            aws ecs run-task --cluster sample-ecs-cluster --task-definition rails-migration

workflows:
  version: 2
  test:
    jobs:
      - build
      - build_image:
          requires:
            - build
          filters:
            branches:
              only: master
      - deploy:
          requires:
            - build_image
          filters:
            branches:
              only: master